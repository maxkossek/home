---
layout: post
title: Arm Assembly
date: 2020-03-26
categories: [usage]
tags: [programming language]
author: "Max Kossek"
description: Reference for the Arm assembly language.
sitemap:
    lastmod: 2020-03-26
---

NAME
====

ARM - Assembly language for the ARM architecture.



DESCRIPTION
===========

ARM machines are a family of reduced instruction set computing (RISC) architectures. ARM has two main execution modes: Thumb and ARM. Instructions in ARM mode occupy a fixed width of 32 bits, instructions in the Thumb mode can be 16 or 32 bits. ARM supports both little or big endian format addresses. Most instructions follow the same format: opcode{flag_suffix}{condition_code} operands.

The "ENTRY" directive declares the entry point of a program. The "END" directive marks the end of a source file. Labels mark segments of code in the source file. Labels consists of a number of characters followed by the ":" character. The ".text" section contains the source code of the file. The ".data" section is reserved for dynamically created variables.



REGISTERS
=========

General purpose registers: R0 - R7. R7 holds syscall numbers.

General purpose registers except FIQ mode: R8 - R12.

Frame Pointer (FP): R11.

Intra Procedural Call (IP): R12.

Stack Pointer (SP): R13.

Link Register (LR): R14.

Program Counter (PC): R15. The ARM architecture pipelines instructions. The program counter points to the instruction being fetched, rather than the instruction being executed.

Current Program Status Register (CPSR).

ARM is a load & store architecture, which means that data values have to be moved into registers before they can be used. There is no way to load values directly from memory.



Condition Codes
===============

Flags:

N - Set to 1 when the result of the operation is negative, else 0.

Z - Set to 1 when the result of the operation is zero, else 0.

C - Set to 1 when the operation results in a carry, or when a subtraction results in no borrow, else 0.

V - Set to 1 when the operation causes overflow, else 0.


Postfixing an instruction with an "S" causes the instruction to set the condition flags. For example "ADDS" would act like the "ADD" instruction, but also set the appropriate flags.


Condition Code suffixes:

Suffix		| Flags			| Meaning
------		| -----			| -------
EQ		| Z set			| Equal
NE		| Z clear		| Not equal
CS or HS	| C set			| Higher or same (unsigned >=)
CC or LO	| C clear		| Lower (unsigned <)
MI		| N set			| Negative
PL		| N clear		| Positive or zero
VS		| V set			| Overflow
VC		| V clear		| No overflow
HI		| C set and z clear	| Higher (unsigned >)
LS		| C clear or z set	| Lower or same (unsigned <=)
GE		| N and V the same	| Signed >=
LT		| N and V differ	| Signed <
GT		| Z clear, N and V same	| Signed >
LE		| Z set, N and V differ	| Signed <=
AL		| Any			| Always
NV		| - 			| Reserved

Most ARM instructions can be appended with these condition codes in order to control execution. For example, the "ADDLT" performs addition when the condition code for less than is currently set. "ANDEQ" performs the bitwise and operation if the equal condition code is set.


INSTRUCTIONS
============

Arithmetic instructions: ADD, ADC (add with carry), SUB, SBC (subtract with carry), RSB (reverse subtract), RSC (reverse subtract with carry).
```
Syntax: op{S}{cond} Rd, Rn, Op2

ADD	r3, r1, r2
SUB	r7, r6, #240
```

Multiplication: MUL, MLA (multiply-accumulate), MLS (multiply-subtract), ASR (arithmetic shift right).
```
Syntax: MUL{S}{cond} Rd, Rm, Rs
Syntax: MLA{S}{cond} Rd, Rm, Rs, Rn

MUL	r10, r2, r5
MLA	r10, r2, r5, r1
```

Bitwise operators: AND, ORR (or), EOR (exclusive or), LSL (logical shift left), LSR (logical shift right), BIC (bit clear), ORN (or not).
```
Syntax: op{S}{cond} Rd, Rn, Op2

AND	r1, r2, #0xFF00
EOR	r0, r1, r2
ORN	r7, r11, lr, ROR #4
```

Comparison Instructions: CMP, CMN (compare negative), TST (test), TEQ (test equivalence). CMP and CMN work like SUBS and ADDS, except that they update the APDR flag register and do not store the result.
```
Syntax: op{cond} Rn, Op2

CMP	r0, r1
CMN	r0, #100
TST	r0, #2
```

Data movement instructions: MOV (move), MVN (move negative), SWP (swap registers and memory).
```
Syntax: MOV{S}{cond} Rd, Op2
Syntax: SWP{B}{cond} Rt, Rt2, [Rn]

MOV	R1, R0
```

Load and store instructions: LDC (load coprocessor), LDR (load register), LDM (load multiple registers), STC (store coprocessor), STR (store register), STM (store multiple registers). The square brackets "[]" indicate that the value is a memory address. Memory addresses can have three forms of offsets: a 12 bit immediate, a register, or a register shifted with an immediate value. Immediate offsets can be positive or negative. The offset can be applied before the transfer (prefix address mode) or after the transfer (postfix address mode). Adding a "!" character after an instruction convert the instruction to prefix address mode.
```
Syntax: op{S}{cond} Rd, <address>

LDR	R2, [R0]
STR	R2, [R0]

LDR	R2, [R1], #4
LDR	R2, [R1, #4]!
STR	R2, [R1, #4]
STR	R2, [R1, #-4]
STR	R2, [R1, #4]!

LDR	R2, [R1], R2
STR	R2, [R1, R2]

LDR	R2, [R1], R2, LSL#2
STR	R2, [R1, R2, LSL#2]

LDM	R2, {R0, R1}
STM	R2, {R0, R1}
```

Stack instructions: PUSH, POP. The PUSH instruction decrements the stack pointer by 4 for each register and stores their value at the new address of the stack pointer. The POP instruction loads the values starting at the current address of the stack pointer and then increases the stack pointer address by 4 for every popped register.
```
Syntax: op{cond} reglist

PUSH	{r0,r4-r7}
PUSH	{r2,lr}
POP	{r0,r10,pc}
```

Branch instructions: B (branch), BL (branch with link), BX (branch and exchange), BLX (branch, link and exchange), BKPT (breakpoint). All of these instructions branch to a label, or to the address contained in Rm. The BL and BLX instructions copy the address of the next instruction into R14 (the link register). The BX and BLX instructions change the processor state from ARM to Thumb, and vice versa.
```
B	loop
```

System Instructions: SWI (software interrupt).



FUNCTIONS
=========

Functions consists of a label and some number of instructions. Functions are responsible for saving and restoring the current state of registers.
